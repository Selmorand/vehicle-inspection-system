name: Deploy to Staging

# When to run this workflow
on:
  push:
    branches: [ main ]  # Runs when you push to main branch
  workflow_dispatch:    # Allows manual running from GitHub

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get your code from GitHub
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Set up PHP (Laravel requirement)
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    # Step 3: Install Composer dependencies
    - name: Install Composer Dependencies
      run: |
        echo "Installing composer dependencies..."
        composer install --no-dev --optimize-autoloader --no-interaction
        echo "Composer install completed"
        # Verify critical packages are installed
        composer show barryvdh/laravel-dompdf || true
        echo "Dependency verification completed"
    
    # Step 4: Create deployment structure for shared hosting
    - name: Prepare deployment files
      run: |
        echo "Starting deployment file preparation..."
        # Clean any existing deployment directory
        rm -rf deployment || true
        
        # Create fresh deployment directory
        mkdir -p deployment
        echo "Created deployment directory"
        
        # Copy Laravel framework files (with error handling)
        echo "Copying Laravel framework files..."
        cp -r app deployment/ || exit 1
        cp -r bootstrap deployment/ || exit 1
        cp -r config deployment/ || exit 1
        cp -r database deployment/ || exit 1
        cp -r resources deployment/ || exit 1
        cp -r routes deployment/ || exit 1
        cp -r storage deployment/ || exit 1
        cp -r vendor deployment/ || exit 1
        echo "Laravel files copied successfully"
        
        # Copy root files
        cp artisan deployment/ || true
        cp composer.json deployment/ || true
        cp composer.lock deployment/ || true
        
        # Copy public folder contents to deployment root (with better error handling)
        if [ -d "public" ] && [ "$(ls -A public 2>/dev/null)" ]; then
          cp -r public/* deployment/ || exit 1
        else
          echo "Warning: public directory is empty or missing"
        fi
        
        # Create empty public folder in deployment (maintain Laravel structure)
        mkdir -p deployment/public
        
        # Update index.php paths for shared hosting (simpler approach)
        if [ -f "deployment/index.php" ]; then
          sed -i 's|/../vendor/autoload.php|/vendor/autoload.php|g' deployment/index.php || true
          sed -i 's|/../bootstrap/app.php|/bootstrap/app.php|g' deployment/index.php || true
        fi
    
    # Step 5: Create staging environment file
    - name: Create staging environment
      run: |
        cat > deployment/.env << EOF
        APP_NAME="Vehicle Inspection System - Staging"
        APP_ENV=staging
        APP_KEY=${{ secrets.STAGING_APP_KEY }}
        APP_DEBUG=false
        APP_URL=https://alpha.selpro.co.za
        
        LOG_CHANNEL=stack
        LOG_DEPRECATIONS_CHANNEL=null
        LOG_LEVEL=debug
        
        DB_CONNECTION=mysql
        DB_HOST=localhost
        DB_PORT=3306
        DB_DATABASE=${{ secrets.STAGING_DB_DATABASE }}
        DB_USERNAME=${{ secrets.STAGING_DB_USERNAME }}
        DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
        
        BROADCAST_DRIVER=log
        CACHE_DRIVER=file
        FILESYSTEM_DRIVER=local
        QUEUE_CONNECTION=sync
        SESSION_DRIVER=file
        SESSION_LIFETIME=120
        
        MAIL_MAILER=smtp
        MAIL_HOST=mailhog
        MAIL_PORT=1025
        MAIL_USERNAME=null
        MAIL_PASSWORD=null
        MAIL_ENCRYPTION=null
        MAIL_FROM_ADDRESS=null
        MAIL_FROM_NAME="\${APP_NAME}"
        EOF
    
    # Step 6: Deploy to staging server via FTP
    - name: Deploy to Staging Server
      uses: SamKirkland/FTP-Deploy-Action@4.3.3
      with:
        server: ${{ secrets.STAGING_FTP_HOST }}
        username: ${{ secrets.STAGING_FTP_USER }}
        password: ${{ secrets.STAGING_FTP_PASSWORD }}
        local-dir: ./deployment/
        server-dir: /public_html/alpha.selpro.co.za/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          .env.example
          
    # Step 7: Set folder permissions via FTP (if supported)
    - name: Set Permissions
      continue-on-error: true
      run: |
        echo "Deployment completed!"
        echo "Note: You may need to manually set folder permissions:"
        echo "- storage/ folder: 755"
        echo "- bootstrap/cache/ folder: 755"
        
    # Step 8: Notify completion
    - name: Deployment Summary
      run: |
        echo "🚀 Staging deployment completed!"
        echo "📍 URL: https://alpha.selpro.co.za"
        echo "📝 Test your changes before promoting to production"
        echo ""
        echo "⚠️  Manual steps may be required on staging:"
        echo "   - Run database migrations if new tables added"
        echo "   - Check storage folder permissions (755)"
        echo "   - Verify .env configuration"