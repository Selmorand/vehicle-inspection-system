@extends('layouts.app')

@section('title', 'Body Panel Assessment')

@section('content')
<div class="container-fluid px-4">
    <!-- Progress Breadcrumb -->
    <div class="row mb-3">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb justify-content-center">
                    <li class="breadcrumb-item"><a href="/inspection/visual" style="color: var(--primary-color);">Visual Inspection</a></li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: var(--primary-color); font-weight: 600;">Body Panel Assessment</li>
                    <li class="breadcrumb-item text-muted">Interior Assessment</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Header -->
    <div class="text-center mb-4">
        <h1 class="display-5 text-gradient mb-2">ALPHA Inspection</h1>
        <h2 class="h4">Body Panel Assessment</h2>
        <p class="text-muted">Click on vehicle panels or hover over form labels to highlight areas</p>
    </div>

    <div class="row">
        <!-- Vehicle Body Panels Visual Section -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header" style="background-color: var(--primary-color); color: white;">
                    <h5 class="mb-0">Vehicle Body Panels</h5>
                </div>
                <div class="card-body">
                    <div class="body-panel-wrapper">
                        <div class="body-panel-container">
                            <!-- Base body panel image -->
                            <img src="/images/panels/FullVehicle.png" alt="Vehicle Base" class="base-body-panel" id="baseBodyPanel">
                            
                            <!-- Body panel overlays will be dynamically generated here -->
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Panel Assessment Form -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header" style="background-color: var(--primary-color); color: white;">
                    <h5 class="mb-0">Panel Assessment Details</h5>
                </div>
                <div class="card-body">
                    <form id="bodyPanelAssessmentForm">
                        @csrf
                        
                        <!-- Dynamic body panel assessments will be generated by JavaScript -->
                        <div id="bodyPanelAssessments">
                            <!-- Panel forms will be added here -->
                        </div>

                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary" id="backBtn">
                                <i class="bi bi-arrow-left me-1"></i>Back to Visual Inspection
                            </button>
                            <div class="button-group-responsive">
                                <button type="button" class="btn btn-secondary me-2 mb-2" id="saveDraftBtn">Save Draft</button>
                                <button type="submit" class="btn btn-primary mb-2" id="nextBtn">
                                    Continue to Interior Assessment <i class="bi bi-arrow-right ms-1"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@section('additional-css')
<link rel="stylesheet" href="{{ asset('css/panel-cards.css') }}">
<style>
/* Body Panel container - responsive for tablet-first design */
.body-panel-container {
    position: relative;
    max-width: 1005px;
    width: 100%;
    margin: 0 auto;
    background-color: #f8f9fa;
    padding: 0;
    overflow: visible;
}

/* Base body panel image - fully responsive */
.base-body-panel {
    width: 100%;
    height: auto;
    display: block;
    max-width: 1005px;
}

/* Panel overlay styling */
.panel-overlay {
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
    position: absolute !important;
}

/* Hover effects for panels */
.panel-overlay:hover {
    opacity: 0.7;
    filter: brightness(0) saturate(100%) invert(21%) sepia(100%) saturate(7463%) hue-rotate(358deg) brightness(105%) contrast(115%);
}

.panel-overlay.active {
    opacity: 0.7;
    filter: brightness(0) saturate(100%) invert(21%) sepia(100%) saturate(7463%) hue-rotate(358deg) brightness(105%) contrast(115%);
}

/* Button responsive layout for tablets */
@media (max-width: 768px) {
    .button-group-responsive {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: 5px;
    }
    
    .button-group-responsive .btn {
        width: 100%;
        margin-right: 0 !important;
    }
    
    .mt-4.d-flex.justify-content-between {
        flex-direction: column !important;
        gap: 10px;
    }
    
    #backBtn {
        width: 100%;
        margin-bottom: 5px;
    }
}

/* Ensure 5px margin bottom for Save Draft on all screen sizes */
#saveDraftBtn {
    margin-bottom: 5px !important;
}
</style>
@endsection

@section('additional-js')
<script src="{{ asset('js/inspection-cards.js') }}"></script>
<script src="{{ asset('js/test-report-handler.js') }}"></script>
<script>
// Load CSV data from panelimages2.csv with pixel coordinates
async function loadBodyPanelData() {
    try {
        const response = await fetch('/panelimages2.csv');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const csvText = await response.text();
        const lines = csvText.trim().split('\n');
        const panels = [];
        
        // Skip first line (headers) but process all data lines
        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',');
            if (values[0] && values[1] && values[2] && values[3] && values[4]) {
                let imageName = values[0];
                const x = parseInt(values[1]);
                const y = parseInt(values[2]); 
                const w = parseInt(values[3]);
                const h = parseInt(values[4]);
                
                // Add .png extension if missing (for rims)
                if (!imageName.includes('.png')) {
                    imageName = imageName + '.png';
                }
                
                // Fix typo in CSV filename
                if (imageName === 'rear-bumber.png') {
                    imageName = 'rear-bumper.png';
                }
                
                // Create panel ID from image name
                const id = imageName.replace('.png', '').replace(/-/g, '-');
                
                // Create proper name from ID
                let name = id.split('-').map(word => 
                    word.charAt(0).toUpperCase() + word.slice(1)
                ).join(' ');
                
                // Fix specific names and handle typos - use full labels
                if (id === 'rear-bumber') name = 'Rear Bumper'; // Handle CSV typo
                if (id === 'lr-quarter-panel') name = 'Left Rear Quarter Panel';
                if (id === 'rr-quarter-panel') name = 'Right Rear Quarter Panel';
                if (id === 'rr-rim') name = 'Right Rear Rim';
                if (id === 'rf-rim') name = 'Right Front Rim';
                if (id === 'lf-rim') name = 'Left Front Rim';
                if (id === 'lr-rim') name = 'Left Rear Rim';
                // Update other abbreviations to full labels
                if (id === 'fr-door') name = 'Right Front Door';
                if (id === 'fr-fender') name = 'Right Front Fender';
                if (id === 'fr-headlight') name = 'Right Front Headlight';
                if (id === 'fr-mirror') name = 'Right Front Mirror';
                if (id === 'lf-door') name = 'Left Front Door';
                if (id === 'lf-fender') name = 'Left Front Fender';
                if (id === 'lf-headlight') name = 'Left Front Headlight';
                if (id === 'lf-mirror') name = 'Left Front Mirror';
                if (id === 'lr-door') name = 'Left Rear Door';
                if (id === 'lr-taillight') name = 'Left Rear Taillight';
                if (id === 'rr-door') name = 'Right Rear Door';
                if (id === 'rr-taillight') name = 'Right Rear Taillight';
                if (id === 'left-skirting') name = 'Left Skirting';
                if (id === 'right-skirting') name = 'Right Skirting';
                
                panels.push({
                    id: id,
                    name: name,
                    image_file: imageName,
                    x: x,
                    y: y,
                    w: w,
                    h: h,
                    z_index: id.includes('rim') ? '2' : '1' // Rims have higher z-index
                });
                
                console.log(`Panel ${i}: ${name} (${imageName}) - ${x},${y},${w},${h}`);
                if (name.includes('Skirting')) {
                    console.log('üîç Skirting panel detected:', name, {id, imageName, x, y, w, h});
                }
            }
        }
        
        console.log(`Loaded ${panels.length} panels from panelImages2.csv`);
        
        // Reorder exactly as specified by user
        const desiredOrder = [
            // 1. Right components
            'fr-fender', 'fr-door', 'rf-rim', 'rr-door', 'rr-rim', 'rr-quarter-panel',
            // 2. Center/Main components
            'bonnet', 'windscreen', 'roof', 'rear-window', 'boot',
            // 3. Left components
            'lf-fender', 'lf-door', 'lf-rim', 'lr-door', 'lr-rim', 'lr-quarter-panel',
            // 4. Front components
            'front-bumper', 'lf-headlight', 'fr-headlight', 'fr-mirror', 'lf-mirror',
            // 5. Rear components
            'lr-taillight', 'rr-taillight', 'rear-bumper',
            // 6. Skirting and Other
            'left-skirting', 'right-skirting'
        ];
        
        const orderedPanels = [];
        desiredOrder.forEach(panelId => {
            const panel = panels.find(p => p.id === panelId);
            if (panel) {
                orderedPanels.push(panel);
            } else {
                console.log('Panel not found in CSV:', panelId);
            }
        });
        
        console.log('All available panels from CSV:', panels.map(p => p.id));
        console.log('Skirting panels specifically:', panels.filter(p => p.id.includes('skirting')));
        
        console.log('Panel order:', orderedPanels.map(p => p.name));
        return orderedPanels;
        
    } catch (error) {
        console.error('Error loading panelimages2.csv:', error);
        console.log('Falling back to test data with just correct panels...');
        
        // Fallback to correct panels only
        return [
            {id: 'windscreen', name: 'Windscreen', image_file: 'windscreen.png', position_left: '57.31%', position_top: '25.87%', width: '14.63%', height: '20.62%', z_index: '1'},
            {id: 'bonnet', name: 'Bonnet', image_file: 'bonnet.png', position_left: '68.06%', position_top: '24.32%', width: '26.97%', height: '24.83%', z_index: '1'},
            {id: 'front-bumper', name: 'Front Bumper', image_file: 'front-bumper.png', position_left: '4.18%', position_top: '87.21%', width: '37.21%', height: '6.28%', z_index: '1'}
        ];
    }
}

// Function to convert pixel coordinates to percentages
function convertPixelsToPercentages(left, top, width, height, baseWidth = 1005, baseHeight = 1353) {
    return {
        left: ((left / baseWidth) * 100).toFixed(2) + '%',
        top: ((top / baseHeight) * 100).toFixed(2) + '%',
        width: ((width / baseWidth) * 100).toFixed(2) + '%',
        height: ((height / baseHeight) * 100).toFixed(2) + '%'
    };
}

// Function to generate panel overlays from panel data
function generatePanelOverlays(panels) {
    const container = document.querySelector('.body-panel-container');
    
    panels.forEach(panel => {
        const img = document.createElement('img');
        img.src = `/images/panels/${panel.image_file}`;
        img.className = 'panel-overlay';
        img.setAttribute('data-panel', panel.id);
        img.style.position = 'absolute';
        
        // Check if coordinates are pixels and need conversion to percentages
        if (panel.x !== undefined && panel.y !== undefined) {
            // Convert from pixels to percentages using CSV format
            const converted = convertPixelsToPercentages(panel.x, panel.y, panel.w, panel.h);
            img.style.left = converted.left;
            img.style.top = converted.top;
            img.style.width = converted.width;
            img.style.height = converted.height;
            
            console.log(`${panel.name}: ${panel.x}px,${panel.y}px,${panel.w}px,${panel.h}px ‚Üí ${converted.left},${converted.top},${converted.width},${converted.height}`);
            if (panel.name.includes('Skirting')) {
                console.log('üéØ Skirting panel positioned:', panel.name, {
                    pixels: {x: panel.x, y: panel.y, w: panel.w, h: panel.h},
                    percentages: converted
                });
            }
        } else if (typeof panel.position_left === 'string' && panel.position_left.includes('%')) {
            // Already percentages (fallback data)
            img.style.left = panel.position_left;
            img.style.top = panel.position_top;
            img.style.width = panel.width;
            img.style.height = panel.height;
        }
        
        if (panel.z_index) {
            img.style.zIndex = panel.z_index;
        }
        img.title = panel.name;
        img.alt = panel.name;
        
        container.appendChild(img);
    });
}

// Function to convert CSV data to InspectionCards format
function convertToInspectionCardsFormat(panels) {
    const mappedPanels = panels.map(panel => ({
        id: `body_panel_${panel.id.replace('-', '_')}`,
        category: panel.name,
        panelId: panel.id
    }));
    
    // Add "Other" panel that doesn't have a visual overlay
    mappedPanels.push({
        id: 'body_panel_other',
        category: 'Other',
        panelId: 'other'
    });
    
    return mappedPanels;
}

document.addEventListener('DOMContentLoaded', async function() {
    // Check if this is a new inspection (coming from dashboard or direct URL)
    // Clear data only if not coming from within the inspection flow
    const referrer = document.referrer;
    const isFromInspectionFlow = referrer.includes('/inspection/');
    const hasInspectionId = sessionStorage.getItem('currentInspectionId');
    
    // If not from inspection flow and no current inspection ID, start fresh
    if (!isFromInspectionFlow && !hasInspectionId) {
        // Starting a new inspection - clear all data
        sessionStorage.removeItem('bodyPanelAssessmentData');
        sessionStorage.removeItem('bodyPanelAssessmentImages');
        sessionStorage.removeItem('visualInspectionData');
        sessionStorage.removeItem('visualInspectionImages');
        sessionStorage.removeItem('interiorAssessmentData');
        sessionStorage.removeItem('interiorAssessmentImages');
        sessionStorage.removeItem('serviceBookletData');
        sessionStorage.removeItem('tyresRimsData');
        sessionStorage.removeItem('tyresRimsAssessmentData');
        sessionStorage.removeItem('mechanicalReportData');
        sessionStorage.removeItem('engineCompartmentData');
        sessionStorage.removeItem('physicalHoistData');
        
        // Set a new inspection ID
        const newInspectionId = 'inspection_' + Date.now();
        sessionStorage.setItem('currentInspectionId', newInspectionId);
    }
    
    // Load panel data from panelimages2.csv
    const panelData = await loadBodyPanelData();
    // Store panel data globally for test report use
    window.currentPanelData = panelData;
    
    if (panelData.length > 0) {
        // Generate panel overlays
        generatePanelOverlays(panelData);
        
        // Convert to InspectionCards format
        const inspectionItems = convertToInspectionCardsFormat(panelData);
        
        // Initialize the reusable InspectionCards system for body panel assessment
        InspectionCards.init({
            // Required Configuration
            formId: 'bodyPanelAssessmentForm',
            containerId: 'bodyPanelAssessments',
            storageKey: 'bodyPanelAssessmentData',
            
            // Body Panel specific configuration
            hasOverlays: true,
            overlaySelector: '.panel-overlay',
            
            // Body panel items data from CSV
            items: inspectionItems,
            
            // Custom field configuration
            fields: {
                condition: { 
                    enabled: true, 
                    label: 'Condition', 
                    options: ['Good', 'Average', 'Bad'] 
                },
                comments: { 
                    enabled: true, 
                    label: 'Comments', 
                    type: 'select',
                    options: ['Scratch', 'Dent', 'Scuffed', 'Chipmark', 'Paintwork', 'Structural damage'] 
                },
                comments2: { 
                    enabled: true, 
                    label: 'Comments', 
                    type: 'select',
                    options: ['Scratch', 'Dent', 'Scuffed', 'Chipmark', 'Paintwork', 'Structural damage'] 
                },
                additional_comments: { 
                    enabled: true, 
                    label: 'Additional Comments', 
                    type: 'text', 
                    placeholder: 'Additional comments' 
                }
            },
            
            // Callback for form submission
            onFormSubmit: function(data) {
                sessionStorage.setItem('bodyPanelAssessmentData', JSON.stringify(data));
                window.location.href = '/inspection/interior';
            }
        });
    }
    
    // Handle navigation buttons
    document.getElementById('backBtn').addEventListener('click', async function() {
        const confirmed = await notify.confirm(
            'Any unsaved data will be lost. Do you want to continue?',
            'Go Back to Visual Inspection'
        );
        
        if (confirmed) {
            window.location.href = '/inspection/visual';
        }
    });
    
    document.getElementById('saveDraftBtn').addEventListener('click', async function() {
        console.log('Save Draft: Starting save...');
        
        // Get form data and images from InspectionCards
        let formData = {};
        let imageData = {};
        
        try {
            if (window.InspectionCards && typeof InspectionCards.getFormData === 'function') {
                formData = InspectionCards.getFormData();
                imageData = InspectionCards.getImages();
                console.log('Draft - Form Data:', formData);
                console.log('Draft - Images:', imageData);
            }
        } catch (e) {
            console.error('Error getting draft data:', e);
        }
        
        // Get current inspection ID from session storage
        const inspectionId = sessionStorage.getItem('currentInspectionId');
        console.log('Draft - Current Inspection ID:', inspectionId);
        
        // Prepare API data
        const apiData = {
            inspection_id: inspectionId,
            panels: [],
            images: imageData
        };
        
        // Extract panel data from form data
        const panelMap = {};
        for (const [key, value] of Object.entries(formData)) {
            const match = key.match(/^([^-]+)-(.+)$/);
            if (match) {
                const panelId = match[1];
                const fieldName = match[2];
                
                if (!panelMap[panelId]) {
                    panelMap[panelId] = { panel_name: panelId };
                }
                
                // Map field names to expected backend format
                if (fieldName === 'condition') {
                    panelMap[panelId].condition = value;
                } else if (fieldName === 'comments') {
                    // 'comments' dropdown maps to 'comment_type' in database
                    panelMap[panelId].comment_type = value;
                } else if (fieldName === 'comments2') {
                    // 'comments2' dropdown maps to 'comment_type2' in database
                    panelMap[panelId].comment_type2 = value;
                } else if (fieldName === 'additional_comments') {
                    // 'additional_comments' text input maps to 'additional_comment' in database
                    panelMap[panelId].additional_comment = value;
                } else {
                    panelMap[panelId][fieldName] = value;
                }
            }
        }
        
        // Convert panel map to array
        apiData.panels = Object.values(panelMap).filter(panel => 
            panel.condition || panel.additional_comment || panel.comment_type || panel.comment_type2 || panel.other_notes
        );
        
        console.log('Draft - API Data being sent:', apiData);
        
        try {
            // Save to database via API
            const response = await fetch('/api/inspection/body-panel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Accept': 'application/json'
                },
                body: JSON.stringify(apiData)
            });
            
            console.log('Draft - API Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Draft - API Error Response:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('Draft - API Response:', result);
            
            if (result.success) {
                console.log('‚úÖ Draft saved successfully to database!');
                
                // Also save to sessionStorage for compatibility
                InspectionCards.saveData();
                
                // Show success notification
                notify.draft('Draft saved to database successfully!');
            } else {
                throw new Error(result.message || 'Failed to save draft');
            }
        } catch (error) {
            console.error('Draft database save failed:', error);
            
            // Still save to sessionStorage as fallback
            InspectionCards.saveData();
            
            // Show fallback notification
            notify.warning('Draft saved locally only. Database save failed: ' + error.message, { duration: 6000 });
        }
    });
    
    document.getElementById('nextBtn').addEventListener('click', async function(e) {
        e.preventDefault(); // Prevent form submission
        
        console.log('Body Panel: Starting save and navigation...');
        
        // Get form data and images from InspectionCards
        let formData = {};
        let imageData = {};
        
        try {
            if (window.InspectionCards && typeof InspectionCards.getFormData === 'function') {
                formData = InspectionCards.getFormData();
                imageData = InspectionCards.getImages();
                console.log('Body Panel Form Data:', formData);
                console.log('Body Panel Images:', imageData);
            }
        } catch (e) {
            console.error('Error getting InspectionCards data:', e);
        }
        
        // Get current inspection ID from session storage
        const inspectionId = sessionStorage.getItem('currentInspectionId');
        console.log('Current Inspection ID:', inspectionId);
        
        // Prepare API data
        const apiData = {
            inspection_id: inspectionId,
            panels: [],
            images: imageData
        };
        
        // Extract panel data from form data
        const panelMap = {};
        for (const [key, value] of Object.entries(formData)) {
            const match = key.match(/^([^-]+)-(.+)$/);
            if (match) {
                const panelId = match[1];
                const fieldName = match[2];
                
                if (!panelMap[panelId]) {
                    panelMap[panelId] = { panel_name: panelId };
                }
                
                // Map field names to expected backend format
                if (fieldName === 'condition') {
                    panelMap[panelId].condition = value;
                } else if (fieldName === 'comments') {
                    // 'comments' dropdown maps to 'comment_type' in database
                    panelMap[panelId].comment_type = value;
                } else if (fieldName === 'comments2') {
                    // 'comments2' dropdown maps to 'comment_type2' in database
                    panelMap[panelId].comment_type2 = value;
                } else if (fieldName === 'additional_comments') {
                    // 'additional_comments' text input maps to 'additional_comment' in database
                    panelMap[panelId].additional_comment = value;
                } else {
                    panelMap[panelId][fieldName] = value;
                }
            }
        }
        
        // Convert panel map to array
        apiData.panels = Object.values(panelMap).filter(panel => 
            panel.condition || panel.additional_comment || panel.comment_type || panel.comment_type2 || panel.other_notes
        );
        
        console.log('API Data being sent:', apiData);
        
        try {
            // Save to database via API
            const response = await fetch('/api/inspection/body-panel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Accept': 'application/json'
                },
                body: JSON.stringify(apiData)
            });
            
            console.log('API Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('API Error Response:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('API Response:', result);
            
            if (result.success) {
                console.log('‚úÖ Body panel assessment saved successfully!');
                
                // Also save to sessionStorage for compatibility
                InspectionCards.saveData();
                
                // Show success notification
                notify.success('Body panel assessment saved successfully!');
                
                setTimeout(() => {
                    window.location.href = '/inspection/interior';
                }, 1500);
            } else {
                throw new Error(result.message || 'Failed to save body panel assessment');
            }
        } catch (error) {
            console.error('Database save failed:', error);
            notify.error('Database save failed: ' + error.message + '. Data saved locally only.', { duration: 6000 });
            
            // Save to sessionStorage anyway and continue
            InspectionCards.saveData();
            setTimeout(() => {
                window.location.href = '/inspection/interior';
            }, 2000);
        }
    });

    // Debug button to test data capture
    const debugBtn = document.getElementById('debugDataBtn');
    if (debugBtn) {
        debugBtn.addEventListener('click', function() {
            console.log('=== DEBUG: Comprehensive form inspection ===');
        
        // 1. Check if form exists
        const form = document.getElementById('bodyPanelAssessmentForm');
        console.log('1. Form element:', form);
        
        // 2. Check if container exists
        const container = document.getElementById('bodyPanelAssessments');
        console.log('2. Container element:', container);
        console.log('   Container HTML:', container ? container.innerHTML : 'NOT FOUND');
        
        // 3. Check all form inputs
        const allInputs = form ? Array.from(form.querySelectorAll('input, select, textarea')) : [];
        console.log('3. All form inputs (' + allInputs.length + '):', allInputs);
        allInputs.forEach((input, index) => {
            console.log(`   Input ${index}:`, {
                name: input.name,
                type: input.type,
                value: input.value,
                element: input
            });
        });
        
        // 4. Check InspectionCards status
        console.log('4. InspectionCards available:', typeof InspectionCards !== 'undefined');
        if (typeof InspectionCards !== 'undefined') {
            try {
                const formData = InspectionCards.getFormData();
                const images = InspectionCards.getImages();
                console.log('   InspectionCards form data:', formData);
                console.log('   InspectionCards images:', images);
            } catch (e) {
                console.error('   InspectionCards error:', e);
            }
        }
        
        // 5. Check sessionStorage
        console.log('5. SessionStorage:');
        console.log('   bodyPanelAssessmentData:', sessionStorage.getItem('bodyPanelAssessmentData'));
        console.log('   bodyPanelAssessmentImages:', sessionStorage.getItem('bodyPanelAssessmentImages'));
        
        // 6. Check panel overlays
        const overlays = document.querySelectorAll('.panel-overlay');
        console.log('6. Panel overlays found:', overlays.length);
        
        // 7. Check if any panels have been clicked/activated
        const activeOverlays = document.querySelectorAll('.panel-overlay.active');
        console.log('7. Active panel overlays:', activeOverlays.length);
        
        // 8. Manual form data collection
        const manualData = {};
        if (form) {
            const formDataObj = new FormData(form);
            for (let [key, value] of formDataObj.entries()) {
                if (value && key !== '_token') {
                    manualData[key] = value;
                }
            }
        }
        console.log('8. Manual form data collection:', manualData);
        
        // 9. Save and check again
        if (typeof InspectionCards !== 'undefined' && InspectionCards.saveData) {
            console.log('9. Forcing save data...');
            InspectionCards.saveData();
            
            setTimeout(() => {
                const afterSaveData = sessionStorage.getItem('bodyPanelAssessmentData');
                console.log('   After save - sessionStorage:', afterSaveData);
            }, 200);
        }
        
        alert('Debug complete! Check the console for detailed information.');
        });
    }
    
});

</script>
