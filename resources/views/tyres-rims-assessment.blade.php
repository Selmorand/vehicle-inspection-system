@extends('layouts.app')

@section('title', 'Tyres & Rims Assessment')

@section('content')
<div class="container-fluid px-4">
    <!-- Progress Breadcrumb -->
    <div class="row mb-3">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb justify-content-center">
                    <li class="breadcrumb-item"><a href="/inspection/visual" style="color: var(--primary-color);">Visual Inspection</a></li>
                    <li class="breadcrumb-item"><a href="/inspection/body-panel" style="color: var(--primary-color);">Body Panel Assessment</a></li>
                    <li class="breadcrumb-item"><a href="/inspection/interior" style="color: var(--primary-color);">Interior Assessment</a></li>
                    <li class="breadcrumb-item"><a href="/inspection/service-booklet" style="color: var(--primary-color);">Service Booklet</a></li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: var(--primary-color); font-weight: 600;">Tyres & Rims Assessment</li>
                    <li class="breadcrumb-item text-muted">Mechanical Report</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Header -->
    <div class="text-center mb-4">
        <h1 class="display-5 text-gradient mb-2">ALPHA Inspection</h1>
        <h2 class="h4">Tyres & Rims Assessment</h2>
        <p class="text-muted">Document the condition and specifications of all four tyres and rims</p>
    </div>

    <!-- Tyres & Rims Assessment -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header" style="background-color: var(--primary-color); color: white;">
                    <h5 class="mb-0">Tyres & Rims:</h5>
                </div>
                <div class="card-body">
                    <form id="tyresRimsAssessmentForm">
                        @csrf
                        
                        
                        <!-- Dynamic tyre assessments will be generated by JavaScript -->
                        <div id="tyresRimsAssessments">
                            <!-- Tyre forms will be added here -->
                        </div>

                        <!-- Disclaimer Section -->
                        <div class="alert alert-info mt-4">
                            <p class="mb-2"><strong>Tyre Safety Information:</strong></p>
                            <p class="mb-2">It is recommended that tyres are replaced when the tread depth reaches 2mm. If uneven tyre wear is noted, this may indicate incorrect geometry, which can result in excessive and rapid tyre wear. A full steering and geometry check is therefore recommended.</p>
                            <p class="mb-2">If this vehicle is fitted with "Run Flat" tyres and no spare wheel. The tyre's effectiveness in a puncture situation cannot be commented on.</p>
                            <p class="mb-0">It is advised to have tyres of the correct size and of similar make, tread pattern and tread depth across axles. This will benefit steering and handling, the operation of the transmission, 4 wheel drive, traction control, ABS and puncture detection systems. This can also prevent premature transmission wear or failure.</p>
                        </div>

                        <!-- Action buttons -->
                        <div class="mt-4 d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary" id="backBtn">
                                <i class="bi bi-arrow-left me-1"></i>Back to Service Booklet
                            </button>
                            <div class="button-group-responsive">
                                <button type="button" class="btn btn-secondary me-2 mb-2" id="saveDraftBtn">Save Draft</button>
                                <button type="submit" class="btn btn-primary mb-2" id="nextBtn">
                                    Continue to Mechanical Report <i class="bi bi-arrow-right ms-1"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@section('additional-css')
<link rel="stylesheet" href="{{ asset('css/panel-cards.css') }}">
<style>
/* Tyres-specific styling - Card layout with labels above fields */
#tyresRimsAssessments .panel-controls {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr auto; /* 5 equal columns + photo button */
    gap: 10px;
    align-items: start;
}

#tyresRimsAssessments .form-field-group {
    display: flex;
    flex-direction: column;
}

#tyresRimsAssessments .field-label {
    font-size: 12px;
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 4px;
    text-align: center;
    background-color: #b8dae0;
    padding: 4px 8px;
    border-radius: 3px;
}

#tyresRimsAssessments .form-control {
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 6px 8px;
    text-align: center;
    font-size: 14px;
}

#tyresRimsAssessments .photo-btn {
    align-self: end;
    margin-bottom: 0;
}

@media (max-width: 768px) {
    #tyresRimsAssessments .panel-controls {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    #tyresRimsAssessments .field-label {
        text-align: left;
    }
    
    #tyresRimsAssessments .form-control {
        text-align: left;
    }
}

/* Alert styling for disclaimer */
.alert-info {
    background-color: #e8f4f8;
    border-color: var(--primary-color);
    color: var(--text-color);
}

/* Button responsive layout for tablets */
@media (max-width: 768px) {
    .button-group-responsive {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: 5px;
    }
    
    .button-group-responsive .btn {
        width: 100%;
        margin-right: 0 !important;
    }
    
    .mt-4.d-flex.justify-content-between {
        flex-direction: column !important;
        gap: 10px;
    }
    
    #backBtn {
        width: 100%;
        margin-bottom: 5px;
    }
}

/* Ensure 5px margin bottom for Save Draft on all screen sizes */
#saveDraftBtn {
    margin-bottom: 5px !important;
}

/* Condition-based color coding for Overall Condition dropdowns */
select[name$="-condition"] {
    transition: background-color 0.3s ease;
}

select[name$="-condition"][value="good"] {
    background-color: #28a745 !important;
    color: white !important;
}

select[name$="-condition"][value="average"] {
    background-color: #ffc107 !important;
    color: #212529 !important;
}

select[name$="-condition"][value="poor"] {
    background-color: #dc3545 !important;
    color: white !important;
}
</style>
@endsection

@section('additional-js')
<script src="{{ asset('js/inspection-cards.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize the reusable InspectionCards system for tyres-rims assessment
    InspectionCards.init({
        // Required Configuration
        formId: 'tyresRimsAssessmentForm',
        containerId: 'tyresRimsAssessments',
        storageKey: 'tyresRimsAssessmentData',
        
        // Tyres-Rims specific configuration (no overlays)
        hasOverlays: false,
        
        // Tyre items data
        items: [
            { id: 'front_left', category: 'Front Left Tyre', panelId: 'front-left' },
            { id: 'front_right', category: 'Front Right Tyre', panelId: 'front-right' },
            { id: 'rear_left', category: 'Rear Left Tyre', panelId: 'rear-left' },
            { id: 'rear_right', category: 'Rear Right Tyre', panelId: 'rear-right' },
            { id: 'spare', category: 'Spare Tyre', panelId: 'spare' }
        ],
        
        // Custom field configuration for tyres (matching 3.png layout)
        fields: {
            size: { 
                enabled: true, 
                label: 'Size', 
                type: 'text', 
                placeholder: 'e.g., 225/45R/18' 
            },
            manufacture: { 
                enabled: true, 
                label: 'Manufacture', 
                type: 'text', 
                placeholder: 'e.g., Continental' 
            },
            model: { 
                enabled: true, 
                label: 'Model', 
                type: 'text', 
                placeholder: 'e.g., SportContact' 
            },
            tread_depth: { 
                enabled: true, 
                label: 'Tread Depth (mm)', 
                type: 'text', 
                placeholder: 'e.g., 5mm' 
            },
            damages: { 
                enabled: true, 
                label: 'Damages', 
                type: 'select',
                options: ['None', 'Puncture', 'Sidewall damage', 'Tread', 'Uneven rundown', 'Mag scuffed', 'Bulges', 'Cracking']
            }
        },
        
        // Callback for form submission
        onFormSubmit: function(data) {
            sessionStorage.setItem('tyresRimsAssessmentData', JSON.stringify(data));
            window.location.href = '/inspection/mechanical-report';
        }
    });
    
    // Handle navigation buttons
    document.getElementById('backBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to go back? Any unsaved data will be lost.')) {
            window.location.href = '/inspection/service-booklet';
        }
    });
    
    document.getElementById('saveDraftBtn').addEventListener('click', function() {
        InspectionCards.saveData();
        notify.draft('Draft saved successfully!');
    });
    
    document.getElementById('nextBtn').addEventListener('click', async function(e) {
        e.preventDefault(); // Prevent form submission
        
        console.log('Tyres & Rims Assessment: Starting save and navigation...');
        
        // Get form data and images from InspectionCards
        let formData = {};
        let imageData = {};
        
        try {
            if (window.InspectionCards && typeof InspectionCards.getFormData === 'function') {
                formData = InspectionCards.getFormData();
                imageData = InspectionCards.getImages();
                console.log('Tyres & Rims Form Data:', formData);
                console.log('Tyres & Rims Images:', imageData);
            }
        } catch (e) {
            console.error('Error getting InspectionCards data:', e);
        }
        
        // Get current inspection ID from session storage
        const inspectionId = sessionStorage.getItem('currentInspectionId');
        console.log('Current Inspection ID:', inspectionId);
        
        // Prepare API data
        const apiData = {
            inspection_id: inspectionId,
            components: [],
            images: imageData
        };
        
        // Extract component data from form data (map tyre fields)
        const componentMap = {};
        for (const [key, value] of Object.entries(formData)) {
            const match = key.match(/^([^-]+)-(.+)$/);
            if (match) {
                const componentId = match[1];
                const fieldName = match[2];
                
                if (!componentMap[componentId]) {
                    componentMap[componentId] = { component_name: componentId };
                }
                
                // Map field names to expected backend format for tyres
                if (fieldName === 'size') {
                    componentMap[componentId].size = value;
                } else if (fieldName === 'manufacture') {
                    componentMap[componentId].manufacture = value;
                } else if (fieldName === 'model') {
                    componentMap[componentId].model = value;
                } else if (fieldName === 'tread_depth') {
                    componentMap[componentId].tread_depth = value;
                } else if (fieldName === 'damages') {
                    componentMap[componentId].damages = value;
                } else {
                    componentMap[componentId][fieldName] = value;
                }
            }
        }
        
        // Convert component map to array
        apiData.components = Object.values(componentMap);
        
        console.log('Tyres & Rims API Data being sent:', apiData);
        
        try {
            // Save to database via API
            const response = await fetch('/api/inspection/tyres-rims', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Accept': 'application/json'
                },
                body: JSON.stringify(apiData)
            });
            
            console.log('Tyres & Rims API Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Tyres & Rims API Error Response:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('Tyres & Rims API Response:', result);
            
            if (result.success) {
                console.log('✅ Tyres & Rims assessment saved successfully!');
                
                // Also save to sessionStorage for compatibility
                InspectionCards.saveData();
                
                // Show success message
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed; top: 20px; right: 20px; padding: 15px 20px;
                    background: #28a745; color: white; border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 10000;
                    font-weight: 500; animation: slideIn 0.3s ease;
                `;
                notification.textContent = '✅ Tyres & Rims data saved successfully!';
                document.body.appendChild(notification);
                
                // Remove notification after delay and navigate
                setTimeout(() => {
                    notification.remove();
                    window.location.href = '/inspection/mechanical-report';
                }, 1500);
            } else {
                throw new Error(result.message || 'Failed to save tyres & rims data');
            }
            
        } catch (error) {
            console.error('Failed to save tyres & rims assessment:', error);
            
            // Show error notification
            const errorNotification = document.createElement('div');
            errorNotification.style.cssText = `
                position: fixed; top: 20px; right: 20px; padding: 15px 20px;
                background: #dc3545; color: white; border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 10000;
                font-weight: 500; animation: slideIn 0.3s ease;
                max-width: 350px;
            `;
            errorNotification.textContent = '❌ Failed to save tyres & rims data: ' + error.message;
            document.body.appendChild(errorNotification);
            
            // Remove error notification after longer delay
            setTimeout(() => {
                errorNotification.remove();
            }, 5000);
            
            // Still save to sessionStorage as fallback
            InspectionCards.saveData();
            sessionStorage.setItem('tyresRimsAssessmentData', JSON.stringify(formData));
            
            // Ask user if they want to continue anyway
            setTimeout(() => {
                if (confirm('Failed to save to database. Do you want to continue anyway? (Data is saved locally)')) {
                    window.location.href = '/inspection/mechanical-report';
                }
            }, 1000);
        }
    });
    
    // Add color coding for condition dropdowns
    document.addEventListener('change', function(e) {
        if (e.target.name && e.target.name.endsWith('-condition')) {
            const select = e.target;
            // Remove existing condition classes
            select.classList.remove('condition-good', 'condition-average', 'condition-poor');
            
            // Set the value attribute for CSS selector
            select.setAttribute('value', select.value);
            
            // Add appropriate condition class for additional styling if needed
            if (select.value) {
                select.classList.add(`condition-${select.value}`);
            }
        }
    });
});
</script>
